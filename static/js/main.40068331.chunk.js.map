{"version":3,"sources":["DisplayData.js","GetUsername.js","GitSearch.js","App.js","serviceWorker.js","index.js"],"names":["DisplayData","this","props","displaydata","username","location","repos","followers","url","create","pic","Fragment","className","src","href","target","style","Component","GetUsername","state","name","handleChange","e","setState","id","value","handleSubmit","preventDefault","document","getElementById","handleName","onSubmit","htmlFor","fontSize","type","onChange","GitSearch","extractAndSetData","data","login","html_url","public_repos","created_at","avatar_url","obj","requestURL","fetch","then","res","json","App","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qSAqBeA,G,uLAjBF,IAAD,EACqDC,KAAKC,MAAMC,YAA/DC,EADD,EACCA,SAASC,EADV,EACUA,SAASC,EADnB,EACmBA,MAAMC,EADzB,EACyBA,UAAUC,EADnC,EACmCA,IAAIC,EADvC,EACuCA,OAAOC,EAD9C,EAC8CA,IAClD,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,UAAf,IAAyB,yBAAKC,IAAKH,KACnC,yBAAKE,UAAU,WACX,uBAAGE,KAAQN,EAAKO,OAAO,QAAQC,MAAO,IAAtC,IAA4C,2BAAIZ,IAChD,wCAAcC,GACd,kDAAwBC,GACxB,yCAAeC,GACf,0CAAgBE,S,GAXVQ,cC+BXC,E,2MA9BXC,MAAQ,CACJC,KAAM,M,EAEVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEP,OAAOS,GAAKF,EAAEP,OAAOU,S,EAIhCC,aAAe,SAACJ,GACZA,EAAEK,iBACF,IAAIP,EAAOQ,SAASC,eAAe,QACnB,KAAbT,EAAKK,OACJ,EAAKvB,MAAM4B,WAAW,EAAKX,OAE/BC,EAAKK,MAAO,I,wEAGZ,OACI,yBAAKb,UAAU,WACX,0BAAMmB,SAAU9B,KAAKyB,cACjB,2BAAOM,QAAQ,OAAOhB,MAAO,CAACiB,SAAU,SAAxC,UACA,2BAAOC,KAAK,OAAOV,GAAG,OAAOW,SAAUlC,KAAKoB,eAC5C,wD,GAxBMJ,aC4CXmB,G,kBAzCX,WAAYlC,GAAO,IAAD,8BACd,4CAAMA,KAYVmC,kBAAoB,SAACC,GAAU,IACrBC,EAAyED,EAAzEC,MAAMC,EAAmEF,EAAnEE,SAASnC,EAA0DiC,EAA1DjC,SAASoC,EAAiDH,EAAjDG,aAAalC,EAAoC+B,EAApC/B,UAAUmC,EAA0BJ,EAA1BI,WAAWC,EAAeL,EAAfK,WAChE,EAAKpB,SAAS,CACVnB,SAAUmC,EACVlC,SAAUA,EACVC,MAAOmC,EACPlC,UAAWA,EACXC,IAAKgC,EACL/B,OAAQiC,EACRhC,IAAKiC,KAtBK,EA0BlBb,WAAa,SAACc,GACV,IAAIC,EAAa,gCAAgCD,EAAIxB,KACrD0B,MAAMD,GAAYE,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAAQF,MAAK,SAAAT,GAAI,OAAI,EAAKD,kBAAkBC,OA1B9E,EAAKnB,MAAQ,CACTf,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,IAAK,GACLC,OAAQ,GACRC,IAAK,IATK,E,sEAgCd,OACA,yBAAKE,UAAU,aACX,kBAAC,EAAD,CAAakB,WAAY7B,KAAK6B,aAC9B,kBAAC,EAAD,CAAa3B,YAAaF,KAAKkB,a,GApCnBF,cCQTiC,E,iLARX,OACE,6BACE,kBAAC,EAAD,W,GAJUjC,aCSEkC,QACW,cAA7BC,OAAO/C,SAASgD,UAEe,UAA7BD,OAAO/C,SAASgD,UAEhBD,OAAO/C,SAASgD,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS5B,SAASC,eAAe,SD6H3C,kBAAmB4B,WACrBA,UAAUC,cAAcC,MAAMZ,MAAK,SAAAa,GACjCA,EAAaC,kB","file":"static/js/main.40068331.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './DisplayData.css';\r\n\r\nclass DisplayData extends Component{\r\n    render(){\r\n        let {username,location,repos,followers,url,create,pic} = this.props.displaydata;\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"circle\"> <img src={pic} /></div>\r\n                <div className=\"display\">\r\n                    <a href = {url} target=\"blank\" style={{}} > <p>{username}</p></a> \r\n                    <p>Location: {location}</p>\r\n                    <p>Total Repositories: {repos}</p>\r\n                    <p>Followers: {followers}</p> \r\n                    <p>Created At: {create}</p>\r\n            </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayData","import React, {Component} from 'react'\r\nimport './DisplayData';\r\n\r\nclass GetUsername extends Component{\r\n    state = {\r\n        name: null,\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        var name = document.getElementById(\"name\");\r\n        if(name.value!==\"\") {\r\n            this.props.handleName(this.state);\r\n        }\r\n        name.value =\"\";\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"gitname\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\" style={{fontSize: '20px'}}>Name: </label>\r\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n                    <button>Get GitHubName</button>\r\n                </form>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetUsername","import React, { Component } from 'react';\r\nimport GetUsername from './GetUsername';\r\nimport DisplayData from './DisplayData';\r\nimport './GitSearch.css'\r\n\r\nclass GitSearch extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            location: '',\r\n            repos: '',\r\n            followers: '',\r\n            url: '',\r\n            create: '',\r\n            pic: '',\r\n        };\r\n    }\r\n\r\n    extractAndSetData = (data) => {\r\n        let { login,html_url,location,public_repos,followers,created_at,avatar_url } = data;\r\n        this.setState({\r\n            username: login,\r\n            location: location,\r\n            repos: public_repos,\r\n            followers: followers,\r\n            url: html_url,\r\n            create: created_at,\r\n            pic: avatar_url\r\n        });\r\n    }\r\n\r\n    handleName = (obj) => {\r\n        let requestURL = 'https://api.github.com/users/'+obj.name;\r\n        fetch(requestURL).then(res => res.json()).then(data => this.extractAndSetData(data));\r\n    }\r\n\r\n    render(){\r\n        return (\r\n        <div className=\"gitsearch\">\r\n            <GetUsername handleName={this.handleName} />\r\n            <DisplayData displaydata={this.state} />\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GitSearch;","import React, { Component } from 'react';\nimport GitSearch from './GitSearch';\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <GitSearch />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}