{"version":3,"sources":["GetUsername.js","DisplayData.js","App.js","serviceWorker.js","index.js"],"names":["GetUsername","state","name","handleChange","e","setState","target","id","value","handleSubmit","preventDefault","document","getElementById","props","handleName","onSubmit","this","htmlFor","type","onChange","Component","DisplayData","displaydata","username","location","repos","followers","url","create","App","obj","requestURL","request","XMLHttpRequest","open","responseType","send","onload","response","login","html_url","public_repos","created_at","className","Boolean","window","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAiCeA,E,2MA9BXC,MAAQ,CACJC,KAAM,M,EAEVC,aAAe,SAACC,GACZ,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAKH,EAAEE,OAAOE,S,EAIhCC,aAAe,SAACL,GACZA,EAAEM,iBACF,IAAIR,EAAOS,SAASC,eAAe,QACnB,KAAbV,EAAKM,OACJ,EAAKK,MAAMC,WAAW,EAAKb,OAE/BC,EAAKM,MAAO,I,wEAGZ,OACI,6BACI,0BAAMO,SAAUC,KAAKP,cACjB,2BAAOQ,QAAQ,QAAf,UACA,2BAAOC,KAAK,OAAOX,GAAG,OAAOY,SAAUH,KAAKb,eAC5C,kD,GAxBMiB,aCgBXC,E,iLAfF,IAAD,EACiDL,KAAKH,MAAMS,YAA3DC,EADD,EACCA,SAASC,EADV,EACUA,SAASC,EADnB,EACmBA,MAAMC,EADzB,EACyBA,UAAUC,EADnC,EACmCA,IAAIC,EADvC,EACuCA,OAC3C,OACI,6BACI,wCAAcL,EAAd,KACA,wCAAcC,GACd,kDAAwBC,GACxB,yCAAeC,GACf,mCAASC,GACT,0CAAgBC,Q,GAVNR,aC4CXS,E,YAzCb,WAAYhB,GAAO,IAAD,8BAChB,4CAAMA,KAURC,WAAa,SAACgB,GACZ,IAAIC,EAAa,gCAAgCD,EAAI5B,KACjD8B,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOH,GACpBC,EAAQG,aAAe,OACvBH,EAAQI,OACRJ,EAAQK,OAAS,WACf,IAAIC,EAAWN,EAAQM,SACjBC,EAA8DD,EAA9DC,MAAMC,EAAwDF,EAAxDE,SAAShB,EAA+Cc,EAA/Cd,SAASiB,EAAsCH,EAAtCG,aAAaf,EAAyBY,EAAzBZ,UAAUgB,EAAeJ,EAAfI,WACrD,EAAKrC,SAAS,CACZkB,SAAUgB,EACVf,SAAUA,EACVC,MAAOgB,EACPf,UAAWA,EACXC,IAAKa,EACLZ,OAAQc,MAxBZ,EAAKzC,MAAQ,CACTsB,SAAU,GACVC,SAAU,GACVC,MAAO,GACPC,UAAW,GACXC,IAAK,GACLC,OAAQ,IARI,E,sEAgChB,OACE,yBAAKe,UAAU,OACb,kBAAC,EAAD,CAAa7B,WAAYE,KAAKF,aAC9B,kBAAC,EAAD,CAAaQ,YAAaN,KAAKf,a,GApCrBmB,aCQEwB,QACW,cAA7BC,OAAOrB,SAASsB,UAEe,UAA7BD,OAAOrB,SAASsB,UAEhBD,OAAOrB,SAASsB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStC,SAASC,eAAe,SD6H3C,kBAAmBsC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4bf7f39b.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\n\r\nclass GetUsername extends Component{\r\n    state = {\r\n        name: null,\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        var name = document.getElementById(\"name\");\r\n        if(name.value!==\"\") {\r\n            this.props.handleName(this.state);\r\n        }\r\n        name.value =\"\";\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"name\">Name: </label>\r\n                    <input type=\"text\" id=\"name\" onChange={this.handleChange} />\r\n                    <button>Get Name</button>\r\n                </form>    \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GetUsername","import React, { Component } from 'react';\r\n\r\nclass DisplayData extends Component{\r\n    render(){\r\n        let {username,location,repos,followers,url,create} = this.props.displaydata;\r\n        return(\r\n            <div >\r\n                <p>Username: {username} </p>\r\n                <p>Location: {location}</p>\r\n                <p>Total Repositories: {repos}</p>\r\n                <p>Followers: {followers}</p> \r\n                <p>URL: {url}</p>\r\n                <p>Created At: {create}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default DisplayData","import React, { Component } from 'react';\nimport GetUsername from './GetUsername';\nimport DisplayData from './DisplayData';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n        username: '',\n        location: '',\n        repos: '',\n        followers: '',\n        url: '',\n        create: '',\n    };\n  }\n  handleName = (obj) => {\n    let requestURL = 'https://api.github.com/users/'+obj.name;\n    let request = new XMLHttpRequest();\n    request.open('GET', requestURL);\n    request.responseType = 'json';\n    request.send();\n    request.onload = () => {\n      let response = request.response;\n      let { login,html_url,location,public_repos,followers,created_at } = response;\n      this.setState({\n        username: login,\n        location: location,\n        repos: public_repos,\n        followers: followers,\n        url: html_url,\n        create: created_at\n      });\n    }\n  }\n  \n  render(){\n    return (\n      <div className=\"App\">\n        <GetUsername handleName={this.handleName} />\n        <DisplayData displaydata={this.state} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}